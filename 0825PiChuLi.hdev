<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="10.0" cs="-777803935">
<procedure name="main">
<interface/>
<body>
<l>list_files ('D:/实习/图片/pic/2017.08.25/C1-08251718', 'files', FilesList)</l>
<l>tuple_regexp_select (FilesList, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima)$','ignore_case'], FilesList)</l>
<c>*|FilesList|</c>
<l>for Index := 12 to |FilesList| - 1 by 1</l>
<l>    dev_close_window()//关闭窗口的实时更新</l>
<l>    dev_update_window ('off')</l>
<c>    </c>
<l>    read_image (Image, FilesList[Index])</l>
<c>    </c>
<l>    parse_filename(FilesList[Index], BaseName, Extension, Directory)</l>
<l>    get_image_size (Image, Width, Height)</l>
<l>    dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>    dev_display (Image)</l>
<c>    </c>
<l>    emphasize (Image, ImageEmphasize0, 7, 7, 5)</l>
<l>    binomial_filter (ImageEmphasize0, ImageBinomial0, 9, 9)</l>
<l>    invert_image (ImageBinomial0, ImageInvert0)</l>
<l>*    mean_image (ImageInvert, ImageMean, 5, 5)</l>
<l>*    dyn_threshold (ImageInvert, ImageMean, Region, 80, 'light')</l>
<l>    threshold (ImageInvert0, Region0, 135, 255)</l>
<l>    closing_circle (Region0, RegionClosing0, 10)</l>
<l>    connection (RegionClosing0, ConnectedRegions0)</l>
<l>    select_shape (ConnectedRegions0, SelectedRegions0, ['width','height'], 'and', [80,40], [180,140])</l>
<l>    select_shape_std (SelectedRegions0, SelectedRegionsStd0, 'max_area', 70)</l>
<l>    count_obj (SelectedRegionsStd0, Number0)</l>
<l>    if (Number0 # 1)</l>
<l>        continue</l>
<l>    endif</l>
<l>    intersection (SelectedRegionsStd0, Region0, RegionIntersection0)</l>
<c>    *旋转图像</c>
<l>    smallest_rectangle2 (RegionIntersection0, Row0, Column0, Phi0, Length01, Length02)</l>
<l>    tuple_deg (Phi0, Deg0)</l>
<l>    rotate_image (Image, ImageRotate0, -Deg0, 'constant')</l>
<c>    *处理旋转后的图像</c>
<l>    emphasize (ImageRotate0, ImageEmphasize01, 7, 7, 5)</l>
<l>    binomial_filter (ImageEmphasize01, ImageBinomia0l, 9, 9)</l>
<l>    invert_image (ImageBinomia0l, ImageInvert01)</l>
<l>*    mean_image (ImageRotate, ImageMean, 3, 3)</l>
<l>*    dyn_threshold (ImageInvert, ImageMean, Region, 30, 'light')</l>
<l>    threshold (ImageInvert01, Region01, 135, 255)</l>
<l>    closing_circle (Region01, RegionClosing01, 10)</l>
<l>    opening_circle (RegionClosing01, RegionOpening01, 5)</l>
<l>    connection (RegionOpening01, ConnectedRegions01)</l>
<l>    select_shape (ConnectedRegions01, SelectedRegions01, ['width','height'], 'and', [70,30], [160,110])</l>
<l>    count_obj (SelectedRegions01, Number01)</l>
<l>    if (Number01 # 1)</l>
<l>        continue</l>
<l>    endif</l>
<l>    intersection (SelectedRegions01, Region01, RegionIntersection01)</l>
<l>    smallest_rectangle2 (RegionIntersection01, Row01, Column01, Phi01, Length011, Length012)</l>
<l>    RegionPriorWidth:=74</l>
<l>    RegionPriorHeight:=30</l>
<c>    *62,26</c>
<l>    gen_rectangle2 (Rectangle01, Row01-1, Column01+Length011/2-RegionPriorWidth/2, 0, RegionPriorWidth, RegionPriorHeight)</l>
<c>    *缩小区域</c>
<l>    reduce_domain (ImageInvert01, Rectangle01, ImageReduced01)</l>
<l>*    threshold (ImageReduced01, Region02, 110, 255)</l>
<l>    mean_image (ImageReduced01, ImageMean01, 3, 3)</l>
<l>    dyn_threshold (ImageReduced01, ImageMean01, Region02, 8, 'light')</l>
<l>    region_to_bin (Region02, BinImage, 255, 0, Width, Height)</l>
<l>    closing_rectangle1 (Region02, RegionClosing02, 30, 1)</l>
<l>    opening_rectangle1 (RegionClosing02, RegionOpening02, 5, 1)</l>
<l>    connection (RegionOpening02, ConnectedRegions02)</l>
<c>    *第一行***********************</c>
<l>    select_shape (ConnectedRegions02, SelectedRegions1, ['width','height','row'], 'and', [40,18,Row01-20], [160,35,Row01])</l>
<l>    intersection (SelectedRegions1, Region02, RegionIntersection1)</l>
<l>    closing_rectangle1 (RegionIntersection1, RegionClosing1, 2, 50)</l>
<l>    closing_circle (RegionClosing1, RegionClosing11, 2)</l>
<l>    connection (RegionClosing11, ConnectedRegions1)</l>
<l>    shape_trans (ConnectedRegions1, RegionTrans1, 'rectangle1')</l>
<l>    partition_rectangle (RegionTrans1, Partitioned1, 14, 32)</l>
<l>    select_shape (Partitioned1, SelectedRegions1, ['area','width','height'], 'and', [100,6,18], [600,20,40])</l>
<l>    intersection (SelectedRegions1, Region02, RegionIntersection11)</l>
<c>    *选中字符</c>
<c>    *排序</c>
<l>    sort_region (RegionIntersection11, SortedRegions1, 'first_point', 'true', 'column')</l>
<l>    count_obj (SortedRegions1, Number1)</l>
<l>    if (Number1 # 8)</l>
<l>        *continue</l>
<l>    endif</l>
<l>    area_center (SortedRegions1, Area1, Row1, Column1)</l>
<l>    priorChar := ['2','0','1','7','0','8','2','5']</l>
<l>    smallest_rectangle1 (SortedRegions1, Row11, Column11, Row12, Column12)</l>
<l>    *for Index1 := 0 to 7 by 1</l>
<l>        *gen_rectangle1 (Rectangle, Row11[Index1], Column11[Index1], Row12[Index1], Column12[Index1])</l>
<l>        *reduce_domain (ImageRotate0, Rectangle, ImageReduced)</l>
<l>        *crop_domain (ImageReduced, ImagePart)</l>
<l>        *imgname := 'D:/实习/seg/datasets/gray/pic_0825_/'+priorChar[Index1]+'/'+'0825'+BaseName+'_'+Index1+'.png'</l>
<l>        *write_image (ImagePart, 'png', 0, imgname)</l>
<l>    *endfor</l>
<c>    </c>
<c>    *第二行***********************</c>
<l>    select_shape (ConnectedRegions02, SelectedRegions2, ['width','height','row'], 'and', [40,18,Row01], [160,35,Row01+16])</l>
<l>    intersection (SelectedRegions2, Region02, RegionIntersection2)</l>
<l>    closing_rectangle1 (RegionIntersection2, RegionClosing2, 2, 50)</l>
<l>    closing_circle (RegionClosing2, RegionClosing21, 2)</l>
<l>    connection (RegionClosing21, ConnectedRegions2)</l>
<l>    shape_trans (ConnectedRegions2, RegionTrans2, 'rectangle1')</l>
<l>    partition_rectangle (RegionTrans2, Partitioned2, 14, 32)</l>
<l>    select_shape (Partitioned2, SelectedRegions2, ['area','width','height'], 'and', [100,6,18], [600,20,40])</l>
<l>    intersection (SelectedRegions2, Region02, RegionIntersection21)</l>
<c>    *选中字符</c>
<c>    *排序</c>
<l>    sort_region (RegionIntersection21, SortedRegions2, 'first_point', 'true', 'column')</l>
<l>    count_obj (SortedRegions2, Number2)</l>
<l>    if (Number2 # 7)</l>
<l>        *continue</l>
<l>    endif</l>
<l>    area_center (SortedRegions2, Area2, Row2, Column2)</l>
<c>    </c>
<l>    priorChar := ['3','6','2','1','7','1','8']</l>
<l>    smallest_rectangle1 (SortedRegions2, Row21, Column21, Row22, Column22)</l>
<l>    *for Index2 := 0 to 6 by 1</l>
<l>        *gen_rectangle1 (Rectangle, Row21[Index2], Column21[Index2], Row22[Index2], Column22[Index2])</l>
<l>        *reduce_domain (ImageRotate0, Rectangle, ImageReduced)</l>
<l>        *crop_domain (ImageReduced, ImagePart)</l>
<l>        *imgname := 'D:/实习/seg/datasets/gray/pic_0825_/'+priorChar[Index2]+'/'+'0825'+BaseName+'_'+Index2+Index1+'.png'</l>
<l>        *write_image (ImagePart, 'png', 0, imgname)</l>
<l>    *endfor</l>
<c>    </c>
<l>    hom_mat2d_identity (HomMat2DIdentity)</l>
<l>    hom_mat2d_rotate (HomMat2DIdentity, Phi0, 0, 0, HomMat2DRotate)</l>
<l>    affine_trans_region (SortedRegions1, RegionAffineTrans, HomMat2DRotate, 'false')</l>
<l>    affine_trans_region (SortedRegions2, RegionAffineTrans1, HomMat2DRotate, 'false')</l>
<l>    smallest_rectangle2 (RegionAffineTrans, Row31, Column31, Phi31, Length311, Length312)</l>
<l>    smallest_rectangle2 (RegionAffineTrans1, Row32, Column32, Phi32, Length321, Length322)</l>
<l>    open_file ('D:/实习/seg/DL/0825/txt/'+BaseName+'.txt', 'output', FileHandle)</l>
<l>    for Index1 := 0 to Number1-1 by 1</l>
<l>        str:=Row31[Index1]+' '+Column31[Index1]+' '+Length311[Index1]+' '+Length312[Index1]+' '+Phi31[Index1]</l>
<l>        fwrite_string (FileHandle, str)     </l>
<l>        fnew_line (FileHandle)</l>
<l>    endfor</l>
<l>    for Index2 := 0 to Number2-1 by 1</l>
<l>        str:=Row32[Index2]+' '+Column32[Index2]+' '+Length321[Index2]+' '+Length322[Index2]+' '+Phi32[Index2]</l>
<l>        fwrite_string (FileHandle, str)     </l>
<l>        fnew_line (FileHandle)</l>
<l>    endfor</l>
<l>    close_file (FileHandle)</l>
<l>    imgname:='D:/实习/seg/DL/0825/images/'+BaseName+'.png'</l>
<l>    write_image (Image, 'png', 0, imgname)</l>
<l>endfor </l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
