<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="10.0" cs="-25243759">
<procedure name="main">
<interface/>
<body>
<l>read_image (Image, 'D:/实习/图片/蒙牛/VLG-02M(0776620216)7.bmp')</l>
<l>get_image_size (Image, Width0, Height0)</l>
<l>dots_image (Image, DotImage0, 3, 'dark', 2)</l>
<l>threshold (DotImage0, Region0, 140, 255)</l>
<l>hough_lines (Region0, 8, 800, 5, 5, Angle0, Dist0)</l>
<l>tuple_length (Angle0, Length)</l>
<l>if (Length &lt; 1)</l>
<l>    hough_lines (Region0, 4, 800, 5, 5, Angle0, Dist0)</l>
<l>    tuple_length (Angle0, Length)</l>
<l>    if (Length &lt; 1)</l>
<l>        hough_lines (Region0, 2, 800, 5, 5, Angle0, Dist0)</l>
<l>    endif</l>
<l>endif</l>
<l>gen_region_hline (RegionLines, Angle0, Dist0)</l>
<l>dilation_circle (RegionLines, RegionLinesDilation, 2.5)</l>
<l>region_to_bin (RegionLinesDilation, BinImage, 255, 0, Width0, Height0)</l>
<l>add_image (Image, BinImage, ImageAddResult, 0.5, 127)</l>
<l>dots_image (ImageAddResult, DotImage01, 3, 'dark', 2)</l>
<l>threshold (DotImage01, Region01, 140, 255)</l>
<l>closing_rectangle1 (Region01, RegionClosing01, 30, 10)</l>
<l>opening_circle (RegionClosing01, RegionOpening01, 3.5)</l>
<l>closing_circle (RegionOpening01, RegionClosing012, 7.5)</l>
<l>fill_up (RegionClosing012, RegionFillUp0)</l>
<l>connection (RegionFillUp0, ConnectedRegions0)</l>
<l>select_shape (ConnectedRegions0, SelectedRegions0, ['width','area'], 'and', [360,10000], [440,24000])</l>
<l>select_shape_std (SelectedRegions0, SelectedRegionsStd0, 'max_area', 70)</l>
<l>count_obj (SelectedRegionsStd0, Number0)</l>
<l>if (Number0 # 1)  </l>
<l>    return ()</l>
<l>endif</l>
<l>intersection (SelectedRegionsStd0, Region0, RegionIntersection0)</l>
<c>*旋转图像</c>
<l>smallest_rectangle2 (RegionIntersection0, Row0, Column0, Phi0, Length01, Length02)</l>
<l>smallest_rectangle1 (RegionIntersection0, Row11, Column11, Row12, Column12)</l>
<l>tuple_deg (Phi0, Deg0)</l>
<c></c>
<l>gen_rectangle1 (Rectangle0, Row11-4, Column11-6, Row12+3, Column12+3)</l>
<c></c>
<l>reduce_domain (Image, Rectangle0, ImageReduced0)</l>
<l>crop_domain (ImageReduced0, ImagePart0)</l>
<l>rotate_image (ImagePart0, ImageRotate0, -Deg0, 'constant')</l>
<c></c>
<l>reduce_domain (DotImage01, Rectangle0, ImageReduced1)</l>
<l>crop_domain (ImageReduced1, ImagePart1)</l>
<l>rotate_image (ImagePart1, ImageRotate1, -Deg0, 'constant')</l>
<c>*处理旋转后的图像</c>
<l>dots_image (ImageRotate1, DotImage2, 3, 'light', 2)</l>
<l>mean_image (DotImage2, ImageMean2, 7, 7)</l>
<l>dyn_threshold (DotImage2, ImageMean2, RegionDynThresh2, 60, 'light')</l>
<c>*形态学处理</c>
<l>gen_rectangle2 (Rectangle2, 10, 10, rad(45), 3, 0)</l>
<l>closing (RegionDynThresh2, Rectangle2, RegionClosing2)</l>
<l>gen_rectangle2 (Rectangle21, 10, 10, rad(135), 3, 0)</l>
<l>closing (RegionClosing2, Rectangle21, RegionClosing21)</l>
<l>closing_rectangle1 (RegionClosing21, RegionClosing22, 5, 30)</l>
<c></c>
<l>connection (RegionClosing22, ConnectedRegions1)</l>
<l>shape_trans (ConnectedRegions1, RegionTrans1, 'rectangle1')</l>
<l>partition_rectangle (RegionTrans1, Partitioned1, 26, 33)</l>
<l>select_shape (Partitioned1, SelectedRegions1, ['width','height'], 'and', [6,30], [28,40])</l>
<l>intersection (SelectedRegions1, RegionDynThresh2, RegionIntersection1)</l>
<l>sort_region (RegionIntersection1, SortedRegions1, 'first_point', 'true', 'column')</l>
<l>count_obj (SortedRegions1, Number1)</l>
<l>if (Number1 # 16)</l>
<l>    return ()</l>
<l>endif</l>
<c>*判断字符是否在直线上</c>
<l>dots_image (ImageRotate0, DotImage3, 3, 'dark', 2)</l>
<l>threshold (DotImage3, Region3, 100, 255)</l>
<c></c>
<l>gen_rectangle2 (Rectangle3, 10, 10, rad(45), 3, 0)</l>
<l>closing (Region3, Rectangle3, RegionClosing3)</l>
<l>gen_rectangle2 (Rectangle31, 10, 10, rad(135), 3, 0)</l>
<l>closing (RegionClosing3, Rectangle31, RegionClosing31)</l>
<l>closing_rectangle1 (RegionClosing31, RegionClosing32, 5, 30)</l>
<c></c>
<l>connection (RegionClosing32, ConnectedRegions3)</l>
<l>count_obj (ConnectedRegions3, Number3)</l>
<l>if (Number3 &lt; 8)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<l>area_center (SortedRegions1, Area11, Row11, Column11)</l>
<c></c>
<l>KnownStr := ['1','M','2','0','1','8','0','8','2','1','A','K','1','0','S','b']</l>
<l>orderChar  := ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']</l>
<l>AreaMax    := [126, 89, 127, 3, 4, 5, 6, 7, 145, 9, 139, 11, 12, 13, 14, 15, 16, 17, 18, 19, 126, 21, 143, 23, 24, 25, 26, 27, 131, 29, 30, 31, 32, 33, 34, 35, 36, 135, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61]</l>
<l>AreaMin    := [101, 66, 102, 3, 4, 5, 6, 7, 125, 9, 122, 11, 12, 13, 14, 15, 16, 17, 18, 19, 104, 21, 124, 23, 24, 25, 26, 27, 113, 29, 30, 31, 32, 33, 34, 35, 36, 121, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61]</l>
<l>AreaDelta := 10</l>
<l>for Index1 := 0 to Number1-1 by 1 </l>
<l>    tuple_find (orderChar, KnownStr[Index1], Indices)</l>
<l>    if ((Area11[Index1] &lt; AreaMin[Indices] - AreaDelta))</l>
<l>        ErrorCount := 1</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>dev_clear_window ()</l>
<l>dev_set_color ('white')</l>
<l>dev_display (SortedRegions1)</l>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
