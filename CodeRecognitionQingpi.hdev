<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="10.0" cs="233725367">
<procedure name="main">
<interface/>
<body>
<l>read_image (Image, 'D:/实习/图片/青啤/C1_45.bmp')</l>
<l>emphasize (Image, ImageEmphasize0, 7, 7, 5)</l>
<l>gray_opening_shape (ImageEmphasize0, ImageOpening, 25, 25, 'rectangle')</l>
<l>threshold (ImageOpening, Region0, 0, 10)</l>
<l>opening_circle (Region0, RegionOpening0, 8)</l>
<l>connection (RegionOpening0, ConnectedRegions0)</l>
<l>select_shape (ConnectedRegions0, SelectedRegions0, ['width','height'], 'and', [80,30], [170,110])</l>
<l>select_shape_std (SelectedRegions0, SelectedRegionsStd0, 'max_area', 70)</l>
<l>count_obj (SelectedRegionsStd0, Number0)</l>
<l>if (Number0 # 1)</l>
<l>    return()</l>
<l>endif</l>
<l>intersection (SelectedRegionsStd0, Region00, RegionIntersection0)</l>
<c>*旋转图像</c>
<l>smallest_rectangle2 (RegionIntersection0, Row0, Column0, Phi0, Length01, Length02)</l>
<l>tuple_deg (Phi0, Deg0)</l>
<l>rotate_image (Image, ImageRotate0, -Deg0, 'constant')</l>
<c>*处理旋转后的图像</c>
<l>emphasize (ImageRotate0, ImageEmphasize01, 7, 7, 5)</l>
<l>binomial_filter (ImageEmphasize01, ImageBinomial01, 7, 7)</l>
<l>gray_opening_shape (ImageEmphasize01, ImageOpening01, 25, 25, 'rectangle')</l>
<l>threshold (ImageOpening01, Region012, 0, 20)</l>
<l>opening_circle (Region012, RegionOpening01, 8)</l>
<l>connection (RegionOpening01, ConnectedRegions01)</l>
<l>select_shape (ConnectedRegions01, SelectedRegions01, ['width','height'], 'and', [80,30], [170,110])</l>
<l>select_shape_std (SelectedRegions01, SelectedRegionsStd01, 'max_area', 70)</l>
<l>count_obj (SelectedRegionsStd01, Number01)</l>
<l>if (Number01 # 1)</l>
<l>    return()</l>
<l>endif</l>
<l>intersection (SelectedRegionsStd01, Region01, RegionIntersection01)</l>
<l>smallest_rectangle2 (RegionIntersection01, Row01, Column01, Phi01, Length011, Length012)</l>
<l>RegionPriorWidth:=74</l>
<l>RegionPriorHeight:=36</l>
<c>*第一行****************************</c>
<l>gen_rectangle2 (Rectangle1, Row01-Length012/2-1, Column01, 0, Length011+4, Length012/2)</l>
<l>reduce_domain (ImageEmphasize01, Rectangle1, ImageReduced1)</l>
<l>binomial_filter (ImageReduced1, ImageBinomial1, 3, 3)</l>
<l>*mean_image (ImageReduced1, ImageMean1, 5, 5)</l>
<l>*dyn_threshold (ImageReduced1, ImageMean1, Region1, 50, 'light')</l>
<l>threshold (ImageBinomial1, Region1, 0, 110)</l>
<l>closing_rectangle1 (Region1, RegionClosing1, 2, 50)</l>
<l>closing_circle (RegionClosing1, RegionClosing11, 3)</l>
<l>connection (RegionClosing11, ConnectedRegions1)</l>
<l>shape_trans (ConnectedRegions1, RegionTrans1, 'rectangle1')</l>
<l>partition_rectangle (RegionTrans1, Partitioned1, 15, 32)</l>
<l>select_shape (Partitioned1, SelectedRegions1, ['area','width','height'], 'and', [100,5,20], [700,25,40])</l>
<l>intersection (SelectedRegions1, Region1, RegionIntersection1)</l>
<c>*选中字符</c>
<c>*排序</c>
<l>sort_region (RegionIntersection1, SortedRegions1, 'first_point', 'true', 'column')</l>
<l>area_center (SortedRegions1, Area11, Row11, Column11)</l>
<l>count_obj (SortedRegions1, Number1)</l>
<l>if (Number1 # 8)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<l>KnownStr := [2,0,1,6,0,7,0,7,7,2,1,2,2,0,4]</l>
<l>AreaPrior := [115,88,100,85,90,90,86,90,110,105]</l>
<l>AreaDelta := 0.4</l>
<l>ErrorCount := 0</l>
<l>for Index1 := 0 to Number1-1 by 1 </l>
<l>    if (Area11[Index1] &lt; AreaPrior[KnownStr[Index1]] * (1-AreaDelta))</l>
<l>        ErrorCount := ErrorCount + 1</l>
<l>        return ()</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<c>*第二行***********************</c>
<l>gen_rectangle2 (Rectangle2, Row01+Length012/2+3, Column01, 0, Length011+4, Length012/2)</l>
<l>reduce_domain (ImageEmphasize01, Rectangle2, ImageReduced2)</l>
<l>binomial_filter (ImageReduced2, ImageBinomial2, 3, 3)</l>
<l>*mean_image (ImageReduced2, ImageMean2, 5, 5)</l>
<l>*dyn_threshold (ImageReduced2, ImageMean2, Region2, 50, 'light')</l>
<l>threshold (ImageBinomial2, Region2, 0, 120)</l>
<l>closing_rectangle1 (Region2, RegionClosing2, 2, 50)</l>
<l>closing_circle (RegionClosing2, RegionClosing21, 3.5)</l>
<l>connection (RegionClosing21, ConnectedRegions2)</l>
<l>shape_trans (ConnectedRegions2, RegionTrans2, 'rectangle1')</l>
<l>partition_rectangle (RegionTrans2, Partitioned2, 12, 32)</l>
<l>select_shape (Partitioned2, SelectedRegions2, ['area','width','height'], 'and', [100,5,20], [550,25,40])</l>
<l>intersection (SelectedRegions2, Region2, RegionIntersection2)</l>
<c>*选中字符</c>
<c>*排序</c>
<l>sort_region (RegionIntersection2, SortedRegions2, 'first_point', 'true', 'column')</l>
<l>area_center (SortedRegions2, Area12, Row12, Column12)</l>
<l>count_obj (SortedRegions2, Number2)</l>
<l>if (Number2 # 7)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<l>for Index2 := 0 to Number2-1 by 1 </l>
<l>    if (Area12[Index2] &lt; AreaPrior[KnownStr[Index2+8]] * (1-AreaDelta))</l>
<l>        ErrorCount := ErrorCount + 1</l>
<l>        return()</l>
<l>    endif</l>
<l>endfor</l>
<l>dev_clear_window ()</l>
<l>dev_set_color ('white')</l>
<l>dev_display (SortedRegions1)</l>
<l>dev_display (SortedRegions2)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
