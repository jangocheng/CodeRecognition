<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="10.0" cs="429482976">
<procedure name="main">
<interface/>
<body>
<l>read_image (Image, 'D:/实习/图片/pic/2017.08.25/C1-08251718/C1_346.bmp')</l>
<l>emphasize (Image, ImageEmphasize0, 7, 7, 5)</l>
<l>binomial_filter (ImageEmphasize0, ImageBinomial0, 5, 5)</l>
<l>invert_image (ImageBinomial0, ImageInvert0)</l>
<l>threshold (ImageInvert0, Region0, 135, 255)</l>
<l>closing_circle (Region0, RegionClosing0, 10)</l>
<l>connection (RegionClosing0, ConnectedRegions0)</l>
<l>select_shape (ConnectedRegions0, SelectedRegions0, ['width','height'], 'and', [90,40], [180,140])</l>
<l>select_shape_std (SelectedRegions0, SelectedRegionsStd0, 'max_area', 70)</l>
<l>count_obj (SelectedRegionsStd0, Number0)</l>
<l>if (Number0 # 1)  </l>
<l>    stop ()</l>
<l>endif</l>
<l>intersection (SelectedRegionsStd0, Region0, RegionIntersection0)</l>
<c>*旋转图像</c>
<l>smallest_rectangle2 (RegionIntersection0, Row0, Column0, Phi0, Length01, Length02)</l>
<l>gen_rectangle2 (Rectangle0, Row0, Column0, Phi0, Length01+4, Length02+4)</l>
<l>reduce_domain (ImageInvert0, Rectangle0, ImageReduced)</l>
<l>crop_domain (ImageReduced, ImagePart)</l>
<l>get_image_pointer1 (ImagePart, Pointer, Type, Width, Height)</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_rotate (HomMat2DIdentity, -Phi0, Width/2, Height/2, HomMat2DRotate)</l>
<l>affine_trans_image (ImagePart, ImageRotate0, HomMat2DRotate, 'constant', 'true')</l>
<c>*处理旋转后的图像</c>
<l>threshold (ImageRotate0, Region01, 130, 255)</l>
<l>area_center (Region01, Area, Row, Column)</l>
<l>gen_rectangle2 (Rectangle1, 10, 10, rad(45), 2, 0)</l>
<l>closing (Region01, Rectangle1, RegionClosing1)</l>
<l>gen_rectangle2 (Rectangle11, 10, 10, rad(135), 2, 0)</l>
<l>closing (RegionClosing1, Rectangle11, RegionClosing11)</l>
<l>closing_rectangle1 (RegionClosing11, RegionClosing12, 2, 3)</l>
<l>connection (RegionClosing12, ConnectedRegions1)</l>
<l>shape_trans (ConnectedRegions1, RegionTrans1, 'rectangle1')</l>
<l>partition_rectangle (RegionTrans1, Partitioned1, 20, 28)</l>
<c>*第一行</c>
<l>select_shape (Partitioned1, SelectedRegions1, ['width','height', 'row'], 'and', [6,18,Row-30], [20,40,Row])</l>
<l>intersection (SelectedRegions1, Region01, RegionIntersection11)</l>
<c>*选中字符</c>
<c>*排序</c>
<l>sort_region (RegionIntersection11, SortedRegions1, 'first_point', 'true', 'column')</l>
<l>count_obj (SortedRegions1, Number1)</l>
<l>area_center (SortedRegions1, Area11, Row11, Column11)</l>
<l>if (Number1 # 8)</l>
<l>    stop ()</l>
<l>endif</l>
<l>KnownStr := [2,0,1,7,0,8,2,5,3,6,2,1,7,1,7]</l>
<l>AreaMax := [136,86,112,116,120,121,138,91,149,138]</l>
<l>AreaMin := [111,54,82,100,100,103,122,65,109,115]</l>
<l>AreaDelta := 5</l>
<l>for Index1 := 0 to Number1-1 by 1 </l>
<l>    if ((Area11[Index1] &lt; AreaMin[KnownStr[Index1]] - AreaDelta) or (Area11[Index1] &gt; AreaMax[KnownStr[Index1]] + AreaDelta))</l>
<l>        ErrorCount := 1</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<c>*第二行***********************</c>
<l>select_shape (Partitioned1, SelectedRegions2, ['width','height', 'row'], 'and', [6,18,Row], [20,40,Row+30])</l>
<l>intersection (SelectedRegions2, Region01, RegionIntersection21)</l>
<c>*选中字符</c>
<c>*排序</c>
<l>sort_region (RegionIntersection21, SortedRegions2, 'first_point', 'true', 'column')</l>
<l>count_obj (SortedRegions2, Number2)</l>
<l>area_center (SortedRegions2, Area12, Row12, Column12)</l>
<l>if (Number2 # 7)</l>
<l>    stop ()</l>
<l>endif</l>
<l>for Index2 := 0 to Number2-1 by 1 </l>
<l>    if ((Area12[Index2] &lt; AreaMin[KnownStr[Index2+8]]-AreaDelta) or (Area12[Index2] &gt; AreaMax[KnownStr[Index2+8]]+AreaDelta))</l>
<l>        ErrorCount := 2</l>
<l>        stop()</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>dev_clear_window ()</l>
<l>dev_set_color ('white')</l>
<l>dev_display (SortedRegions1)</l>
<l>dev_display (SortedRegions2)</l>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
