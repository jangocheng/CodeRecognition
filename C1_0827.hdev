<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="10.0" cs="-587142200">
<procedure name="main">
<interface/>
<body>
<l>read_image (Image, 'D:/实习/图片/C1  20180827/C1_124.bmp')</l>
<l>KnownStr := ['2','0','1','8','0','8','2','7','1','0','0','7','1','3','E']</l>
<l>emphasize (Image, ImageEmphasize, 7, 7, 3)</l>
<l>binomial_filter (ImageEmphasize, ImageBinomial0, 5, 5)</l>
<l>gray_erosion_shape (ImageBinomial0, ImageMin0, 11, 11, 'octagon')</l>
<l>bin_threshold (ImageMin0, Region0)</l>
<l>closing_rectangle1 (Region0, RegionClosing00, 20, 20)</l>
<l>connection (RegionClosing00, ConnectedRegions0)</l>
<l>select_shape (ConnectedRegions0, SelectedRegions0, ['width','height'], 'and', [160,55], [250,180])</l>
<l>count_obj (SelectedRegions0, Number0)</l>
<l>if (Number0 # 1)  </l>
<l>    stop ()</l>
<l>endif</l>
<l>intersection (SelectedRegions0, Region0, RegionIntersection0)</l>
<c>*旋转图像</c>
<l>smallest_rectangle2 (RegionIntersection0, Row0, Column0, Phi0, Length01, Length02)</l>
<l>smallest_rectangle1 (RegionIntersection0, Row11, Column11, Row12, Column12)</l>
<l>gen_rectangle1 (Rectangle0, Row11, Column11, Row12, Column12)</l>
<l>reduce_domain (ImageBinomial0, Rectangle0, ImageReduced0)</l>
<l>crop_domain (ImageReduced0, ImagePart0)</l>
<l>get_image_size (ImagePart0, Width, Height)</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_rotate (HomMat2DIdentity, -Phi0, Width/2, Height/2, HomMat2DRotate)</l>
<l>affine_trans_image (ImagePart0, ImageRotate0, HomMat2DRotate, 'constant', 'true')</l>
<c>*处理旋转后的图</c>
<l>bin_threshold (ImageRotate0, Region01)</l>
<l>smallest_rectangle1 (Region01, Row21, Column21, Row22, Column22)</l>
<l>gen_rectangle1 (Rectangle02, Row21, Column21, Row22, Column22)</l>
<l>reduce_domain (ImageRotate0, Rectangle02, ImageReduced02)</l>
<l>bin_threshold (ImageReduced02, Region02)</l>
<l>area_center (Region02, Area, Row, Column)</l>
<l>gen_rectangle2 (Rectangle1, 10, 10, rad(45), 2, 0)</l>
<l>closing (Region02, Rectangle1, RegionClosing1)</l>
<l>gen_rectangle2 (Rectangle11, 10, 10, rad(135), 2, 0)</l>
<l>closing (RegionClosing1, Rectangle11, RegionClosing11)</l>
<l>closing_rectangle1 (RegionClosing11, RegionClosing12, 5, 7)</l>
<l>connection (RegionClosing12, ConnectedRegions1)</l>
<l>shape_trans (ConnectedRegions1, RegionTrans1, 'rectangle1')</l>
<l>partition_rectangle (RegionTrans1, Partitioned1, 20, 28)</l>
<c>*第一行</c>
<l>select_shape (Partitioned1, SelectedRegions1, ['width','height', 'row'], 'and', [6,20, Row-30], [35,40, Row])</l>
<l>intersection (SelectedRegions1, Region02, RegionIntersection11)</l>
<c>*选中字符</c>
<c>*排序</c>
<l>sort_region (RegionIntersection11, SortedRegions1, 'first_point', 'true', 'column')</l>
<l>count_obj (SortedRegions1, Number1)</l>
<l>area_center (SortedRegions1, Area11, Row11, Column11)</l>
<l>if (Number1 # 8)</l>
<l>    stop ()</l>
<l>endif</l>
<l>orderChar := [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'E']</l>
<l>AreaMax := [157, 83, 140, 120, 131, 128, 225, 103, 162, 136,153]</l>
<l>AreaMin := [127, 60, 110, 136, 117, 119, 142, 96, 141, 181, 173]</l>
<l>AreaDelta := 10</l>
<l>for Index1 := 0 to Number1-1 by 1  </l>
<l>    tuple_find (orderChar, KnownStr[Index1], Indices)</l>
<l>    if ((Area11[Index1] &lt; AreaMin[Indices] - AreaDelta))</l>
<l>        ErrorCount := 1</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<c>*第二行***********************</c>
<l>select_shape (Partitioned1, SelectedRegions2, ['width','height', 'row'], 'and', [6,20, Row], [35,40, Row+30])</l>
<l>intersection (SelectedRegions2, Region02, RegionIntersection21)</l>
<c>*选中字符</c>
<c>*排序</c>
<l>sort_region (RegionIntersection21, SortedRegions2, 'first_point', 'true', 'column')</l>
<l>count_obj (SortedRegions2, Number2)</l>
<l>area_center (SortedRegions2, Area12, Row12, Column12)</l>
<l>if (Number2 # 7)</l>
<l>    stop ()</l>
<l>endif</l>
<l>dev_clear_window ()</l>
<l>for Index2 := 0 to Number2-1 by 1 </l>
<l>    tuple_find (orderChar, KnownStr[Index2+8], Indices)</l>
<l>    if ((Area12[Index2] &lt; AreaMin[Indices] - AreaDelta))</l>
<l>        ErrorCount := 2</l>
<l>        stop()</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>dev_clear_window ()</l>
<l>dev_set_color ('white')</l>
<l>dev_display (SortedRegions1)</l>
<l>dev_display (SortedRegions2)</l>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
