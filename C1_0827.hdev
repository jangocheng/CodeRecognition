<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="10.0" cs="534283819">
<procedure name="main">
<interface/>
<body>
<l>read_image (Image, 'D:/实习/图片/珠江啤酒/C1/C1_1.bmp')</l>
<l>KnownStr := ['2','0','1','8','0','9','1','0','1','1','5','1','1','3','E']</l>
<l>illuminate (Image, ImageIlluminate, 40, 40, 0.55)</l>
<l>emphasize (ImageIlluminate, ImageEmphasize0, 7, 7, 3)</l>
<l>binomial_filter (ImageEmphasize0, ImageBinomial0, 3, 3)</l>
<l>var_threshold (ImageBinomial0, Region0, 15, 15, 0.5, 20, 'dark')</l>
<l>*threshold (ImageBinomial0, Region0, 0, 95)</l>
<l>closing_circle (Region0, RegionClosing0, 5.5)</l>
<l>closing_rectangle1 (RegionClosing0, RegionClosing00, 20, 20)</l>
<l>connection (RegionClosing00, ConnectedRegions0)</l>
<l>select_shape (ConnectedRegions0, SelectedRegions0, ['width','height'], 'and', [80,40], [220,140])</l>
<l>select_shape_std (SelectedRegions0, SelectedRegionsStd0, 'max_area', 70)</l>
<l>ErrorCounts := 0</l>
<l>count_obj (SelectedRegionsStd0, Number0)</l>
<l>if (Number0 # 1)  </l>
<l>    ErrorCounts := 10</l>
<l>    stop ()</l>
<l>endif</l>
<l>intersection (SelectedRegionsStd0, Region0, RegionIntersection0)</l>
<c>*旋转图像</c>
<l>smallest_rectangle2 (RegionIntersection0, Row0, Column0, Phi0, Length01, Length02)</l>
<l>tuple_deg (Phi0, Deg0)</l>
<l>rotate_image (ImageBinomial0, ImageRotate0, -Deg0, 'constant')</l>
<c>*处理旋转后的图像</c>
<l>var_threshold (ImageRotate0, Region01, 15, 15, 0.5, 20, 'dark')</l>
<l>closing_rectangle1 (Region01, RegionClosing011, 15, 10)</l>
<l>closing_circle (RegionClosing011, RegionClosing01, 10)</l>
<l>connection (RegionClosing01, ConnectedRegions01)</l>
<l>select_shape (ConnectedRegions01, SelectedRegions01, ['width','height'], 'and', [130,40], [220,140])</l>
<l>select_shape_std (SelectedRegions01, SelectedRegionsStd01, 'max_area', 70)</l>
<l>count_obj (SelectedRegionsStd01, Number01)</l>
<l>if (Number01 # 1)  </l>
<l>    ErrorCounts := 10</l>
<l>    stop ()</l>
<l>endif</l>
<l>intersection (SelectedRegionsStd01, Region01, RegionIntersection01)</l>
<l>smallest_rectangle2 (RegionIntersection01, Row01, Column01, Phi01, Length011, Length012)</l>
<l>gen_rectangle2 (Rectangle01, Row01-1, Column01, 0, Length011, Length012)</l>
<c>*缩小区域</c>
<l>reduce_domain (ImageRotate0, Rectangle01, ImageReduced01)</l>
<l>median_image (ImageReduced01, ImageMedian01, 'circle', 2, 'mirrored')</l>
<l>threshold (ImageMedian01, Region02, 0, 120)</l>
<l>closing_rectangle1 (Region02, RegionClosing02, 50, 3)</l>
<l>connection (RegionClosing02, ConnectedRegions02)</l>
<c>*第一行****************************</c>
<l>select_shape (ConnectedRegions02, SelectedRegions1, ['width','height','row'], 'and', [140,22,Row01-30], [200,38,Row01])</l>
<l>intersection (SelectedRegions1, Region02, RegionIntersection1)</l>
<l>closing_rectangle1 (RegionIntersection1, RegionClosing1, 3, 50)</l>
<l>connection (RegionClosing1, ConnectedRegions1)</l>
<l>shape_trans (ConnectedRegions1, RegionTrans1, 'rectangle1')</l>
<l>partition_rectangle (RegionTrans1, Partitioned1, 15, 32)</l>
<l>select_shape (Partitioned1, SelectedRegions1, ['width','height'], 'and', [7,18], [25,35])</l>
<l>intersection (SelectedRegions1, Region02, RegionIntersection11)</l>
<c>*选中字符</c>
<c>*排序</c>
<l>sort_region (RegionIntersection11, SortedRegions1, 'first_point', 'true', 'column')</l>
<l>count_obj (SortedRegions1, Number1)</l>
<l>area_center (SortedRegions1, Area11, Row11, Column11)</l>
<l>if (Number1 # 8)</l>
<l>    ErrorCounts := 1</l>
<l>    stop ()</l>
<l>endif</l>
<l>orderChar := [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'E']</l>
<l>AreaMax := [236, 211, 242, 216, 180, 184, 226, 194, 298, 200, 257]</l>
<l>AreaMin := [127, 60, 110, 136, 117, 119, 142, 96, 141, 181, 173]</l>
<l>AreaDelta := 50</l>
<l>for Index1 := 0 to Number1-1 by 1  </l>
<l>    tuple_find (orderChar, KnownStr[Index1], Indices)</l>
<l>    if ((Area11[Index1] &lt; AreaMin[Indices] - AreaDelta)or(Area11[Index1] &gt; AreaMax[Indices] + AreaDelta))</l>
<l>        ErrorCounts := 1</l>
<l>        *stop ()</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<c>*第二行***********************</c>
<l>select_shape (ConnectedRegions02, SelectedRegions2, ['width','height','row'], 'and', [140,22,Row01], [200,38,Row01+30])</l>
<l>intersection (SelectedRegions2, Region02, RegionIntersection2)</l>
<l>closing_rectangle1 (RegionIntersection2, RegionClosing2, 3, 50)</l>
<l>connection (RegionClosing2, ConnectedRegions2)</l>
<l>shape_trans (ConnectedRegions2, RegionTrans2, 'rectangle1')</l>
<l>partition_rectangle (RegionTrans2, Partitioned2, 15, 32)</l>
<l>select_shape (Partitioned2, SelectedRegions2, ['width','height'], 'and', [7,18], [25,35])</l>
<l>intersection (SelectedRegions2, Region02, RegionIntersection21)</l>
<c>*选中字符</c>
<c>*排序</c>
<l>sort_region (RegionIntersection21, SortedRegions2, 'first_point', 'true', 'column')</l>
<l>count_obj (SortedRegions2, Number2)</l>
<l>area_center (SortedRegions2, Area12, Row12, Column12)</l>
<l>if (Number2 # 7)</l>
<l>    ErrorCounts := 2</l>
<l>    stop ()</l>
<l>endif</l>
<l>for Index2 := 0 to Number2-1 by 1 </l>
<l>    tuple_find (orderChar, KnownStr[Index2+8], Indices)</l>
<l>    if ((Area12[Index2] &lt; AreaMin[Indices] - AreaDelta)or(Area12[Index2] &gt; AreaMax[Indices] + AreaDelta))</l>
<l>        ErrorCounts := 2</l>
<l>        *stop()</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>dev_clear_window ()</l>
<l>dev_set_color ('white')</l>
<l>dev_display (SortedRegions1)</l>
<l>dev_display (SortedRegions2)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
