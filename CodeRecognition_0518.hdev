<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="10.0" cs="650394351">
<procedure name="main">
<interface/>
<body>
<l>read_image (Image, 'D:/实习/图片/pic/2017.05.18/C1/C1_370.bmp')</l>
<l>emphasize (Image, ImageEmphasize0, 7, 7, 5)</l>
<l>threshold (ImageEmphasize0, Region0, 0, 105)</l>
<l>closing_circle (Region0, RegionClosing0, 10)</l>
<l>connection (RegionClosing0, ConnectedRegions0)</l>
<l>select_shape (ConnectedRegions0, SelectedRegions0, ['width','height'], 'and', [80,40], [180,140])</l>
<l>select_shape_std (SelectedRegions0, SelectedRegionsStd0, 'max_area', 70)</l>
<l>ErrorCount := 0</l>
<l>count_obj (SelectedRegionsStd0, Number0)</l>
<l>if (Number0 # 1)  </l>
<l>    ErrorCount := 10</l>
<l>    return ()</l>
<l>endif</l>
<l>intersection (SelectedRegionsStd0, Region0, RegionIntersection0)</l>
<c>*旋转图像</c>
<l>smallest_rectangle2 (RegionIntersection0, Row0, Column0, Phi0, Length01, Length02)</l>
<l>tuple_deg (Phi0, Deg0)</l>
<l>rotate_image (Image, ImageRotate0, -Deg0-1.5, 'constant')</l>
<c>*处理旋转后的图像</c>
<l>emphasize (ImageRotate0, ImageEmphasize01, 7, 7, 5)</l>
<l>invert_image (ImageEmphasize01, ImageInvert01)</l>
<l>threshold (ImageInvert01, Region01, 140, 255)</l>
<l>closing_circle (Region01, RegionClosing01, 10)</l>
<l>opening_circle (RegionClosing01, RegionOpening01, 5)</l>
<l>connection (RegionOpening01, ConnectedRegions01)</l>
<l>select_shape (ConnectedRegions01, SelectedRegions01, ['width','height'], 'and', [70,40], [140,75])</l>
<l>count_obj (SelectedRegions01, Number01)</l>
<l>if (Number01 # 1)  </l>
<l>    ErrorCounts := 10</l>
<l>    return ()</l>
<l>endif</l>
<l>intersection (SelectedRegions01, Region01, RegionIntersection01)</l>
<l>smallest_rectangle2 (RegionIntersection01, Row01, Column01, Phi01, Length011, Length012)</l>
<l>gen_rectangle2 (Rectangle01, Row01-1, Column01-2, 0, Length011+4, Length012)</l>
<c>*缩小区域</c>
<l>reduce_domain (ImageInvert01, Rectangle01, ImageReduced01)</l>
<l>close_edges (Rectangle01, ImageReduced01, Region02, 90)</l>
<l>*median_image (ImageReduced01, ImageMedian01, 'circle', 2, 'mirrored')</l>
<l>*threshold (ImageMedian01, Region02, 60, 255)</l>
<l>closing_rectangle1 (Region02, RegionClosing02, 30, 1)</l>
<l>connection (RegionClosing02, ConnectedRegions02)</l>
<c>*第一行****************************</c>
<l>select_shape (ConnectedRegions02, SelectedRegions1, ['width','height','row'], 'and', [40,15,Row01-20], [160,35,Row01])</l>
<l>intersection (SelectedRegions1, Region02, RegionIntersection1)</l>
<l>closing_rectangle1 (RegionIntersection1, RegionClosing1, 2, 50)</l>
<l>connection (RegionClosing1, ConnectedRegions1)</l>
<l>shape_trans (ConnectedRegions1, RegionTrans1, 'rectangle1')</l>
<l>partition_rectangle (RegionTrans1, Partitioned1, 12, 32)</l>
<l>select_shape (Partitioned1, SelectedRegions1, ['area','width','height'], 'and', [100,7,18], [550,20,35])</l>
<l>intersection (SelectedRegions1, Region02, RegionIntersection11)</l>
<c>*选中字符</c>
<c>*排序</c>
<l>sort_region (RegionIntersection11, SortedRegions1, 'first_point', 'true', 'column')</l>
<l>count_obj (SortedRegions1, Number1)</l>
<l>area_center (SortedRegions1, Area11, Row11, Column11)</l>
<l>if (Number1 # 8)</l>
<l>    ErrorCounts := 1</l>
<l>    return ()</l>
<l>endif</l>
<l>KnownStr := [2,0,1,7,0,5,1,8,5,6,4,1,4,0,6]</l>
<l>AreaMax := [139, 91, 112, 112, 98, 127, 119, 90, 133, 135]</l>
<l>AreaMin := [93, 63, 56, 70, 71, 17, 62, 72, 113, 110]</l>
<l>AreaDelta := 5</l>
<l>for Index1 := 0 to Number1-1 by 1 </l>
<l>    if ((Area11[Index1] &lt; AreaMin[KnownStr[Index1]] - AreaDelta) or (Area11[Index1] &gt; AreaMax[KnownStr[Index1]] + AreaDelta))</l>
<l>        ErrorCounts := 1</l>
<l>        return ()</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<c>*第二行***********************</c>
<l>select_shape (ConnectedRegions02, SelectedRegions2, ['width','height','row'], 'and', [40,15,Row01], [160,35,Row01+20])</l>
<l>intersection (SelectedRegions2, Region02, RegionIntersection2)</l>
<l>closing_rectangle1 (RegionIntersection2, RegionClosing2, 2, 50)</l>
<l>connection (RegionClosing2, ConnectedRegions2)</l>
<l>shape_trans (ConnectedRegions2, RegionTrans2, 'rectangle1')</l>
<l>partition_rectangle (RegionTrans2, Partitioned2, 12, 32)</l>
<l>select_shape (Partitioned2, SelectedRegions2, ['area','width','height'], 'and', [100,7,18], [550,20,35])</l>
<l>intersection (SelectedRegions2, Region02, RegionIntersection21)</l>
<c>*选中字符</c>
<c>*排序</c>
<l>sort_region (RegionIntersection21, SortedRegions2, 'first_point', 'true', 'column')</l>
<l>count_obj (SortedRegions2, Number2)</l>
<l>area_center (SortedRegions2, Area12, Row12, Column12)</l>
<l>if (Number2 # 7)</l>
<l>    ErrorCount := 2</l>
<l>    return ()</l>
<l>endif</l>
<l>for Index2 := 0 to Number2-1 by 1 </l>
<l>    if ((Area12[Index2] &lt; AreaMin[KnownStr[Index2+8]]-AreaDelta) or (Area12[Index2] &gt; AreaMax[KnownStr[Index2+8]]+AreaDelta))</l>
<l>        ErrorCounts := 2</l>
<l>        return()</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>dev_clear_window ()</l>
<l>dev_set_color ('white')</l>
<l>dev_display (SortedRegions1)</l>
<l>dev_display (SortedRegions2)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
